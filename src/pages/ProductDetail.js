import React, { useEffect, useState,useCallback } from "react";
import { useParams,useNavigate } from "react-router-dom";
import axios from "axios";
import { FaChevronLeft, FaChevronRight, FaChevronDown, FaChevronUp } from "react-icons/fa";

function ProductDetail() {
  const { id } = useParams();
  const [product, setProduct] = useState(null);
  const [adding, setAdding] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showAllSpecs, setShowAllSpecs] = useState(false);
  const [fade, setFade] = useState(false); // üëà tr·∫°ng th√°i ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng fade
  const navigate = useNavigate();
  useEffect(() => {
    axios
      .get(`http://localhost:5000/products/${id}`)
      .then((res) => {
        setProduct(res.data);
        setCurrentIndex(0);
      })
      .catch((err) => console.error("L·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m:", err));
  }, [id]);
  const handleNext = useCallback(() => {
    setFade(true);
    setTimeout(() => {
      setCurrentIndex((prev) =>
        prev === product.images.length - 1 ? 0 : prev + 1
      );
      setFade(false);
    }, 500);
  },[product]);

  // üëá Auto chuy·ªÉn ·∫£nh sau 10 gi√¢y
  useEffect(() => {
    if (product && product.images && product.images.length > 1) {
      const interval = setInterval(() => {
        handleNext();
      }, 10000);
      return () => clearInterval(interval);
    }
  }, [product, currentIndex,handleNext]);

  const handlePrev = () => {
    setFade(true);
    setTimeout(() => {
      setCurrentIndex((prev) =>
        prev === 0 ? product.images.length - 1 : prev - 1
      );
      setFade(false);
    }, 500); // th·ªùi gian hi·ªáu ·ª©ng fade
  };

  const handleAddToCart = async () => {
    const token = localStorage.getItem("token");
    if (!token) {
      alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng");
      return;
    }

    setAdding(true);
    try {
      await axios.post(
        "http://localhost:5000/cart/add",
        { product_id: product.id, quantity: 1 },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      alert("üõí ƒê√£ th√™m v√†o gi·ªè h√†ng!");
      navigate("/");

    } catch (error) {
      console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
      if (error.response?.status === 401) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i!");
      } else {
        alert("Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i!");
      }
    } finally {
      setAdding(false);
    }
  };

  if (!product) return <p>ƒêang t·∫£i...</p>;

  // Chu·∫©n b·ªã d·ªØ li·ªáu specs th√†nh array ƒë·ªÉ d·ªÖ c·∫Øt 10 d√≤ng
  const specs = [
    { label: "H√£ng", value: product.brand },
    { label: "CPU", value: product.cpu || "Ch∆∞a r√µ" },
    { label: "RAM", value: product.ram },
    { label: "B·ªô nh·ªõ", value: product.storage },
    { label: "M√†n h√¨nh", value: product.screen },
    { label: "Pin", value: product.battery },
    { label: "H·ªá ƒëi·ªÅu h√†nh", value: product.os },
    { label: "Camera tr∆∞·ªõc", value: product.camera_front },
    { label: "Camera sau", value: product.camera_rear },
    { label: "M√†u s·∫Øc", value: product.color },
    { label: "K√≠ch th∆∞·ªõc", value: product.dimensions },
    { label: "Tr·ªçng l∆∞·ª£ng", value: product.weight },
    { label: "C·ªïng k·∫øt n·ªëi", value: product.ports },
    { label: "B·∫£o h√†nh", value: product.warranty },
    { label: "Ng√†y ph√°t h√†nh", value: product.release_date },
  ];

  const visibleSpecs = showAllSpecs ? specs : specs.slice(0, 10);

  return (
    <div className="container py-4">
      <div className="row">
        {/* ·∫¢nh s·∫£n ph·∫©m */}
        <div className="col-md-5 text-center">
          <div className="position-relative" style={{ maxWidth: "400px", margin: "0 auto" }}>
            <img
              src={product.images[currentIndex]}
              alt={product.name}
              className={`img-fluid fade-image ${fade ? "fade-out" : "fade-in"}`}
              style={{ borderRadius: "8px", maxHeight: "400px", objectFit: "contain" }}
            />
            <button
              onClick={handlePrev}
              className="btn shadow-sm"
              style={{
                position: "absolute",
                left: "-50px",
                top: "50%",
                transform: "translateY(-50%)",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                backgroundColor: "rgba(255, 255, 255, 0.9)",
                border: "1px solid #ddd",
              }}
            >
              <FaChevronLeft />
            </button>
            <button
              onClick={handleNext}
              className="btn shadow-sm"
              style={{
                position: "absolute",
                right: "-50px",
                top: "50%",
                transform: "translateY(-50%)",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                backgroundColor: "rgba(255, 255, 255, 0.9)",
                border: "1px solid #ddd",
              }}
            >
              <FaChevronRight />
            </button>
          </div>

          {/* Thumbnail */}
          <div className="d-flex gap-2 justify-content-center flex-wrap mt-3">
            {product.images &&
              product.images.map((img, idx) => (
                <img
                  key={idx}
                  src={img}
                  alt={`thumb-${idx}`}
                  className="img-thumbnail"
                  style={{
                    width: "70px",
                    height: "70px",
                    objectFit: "cover",
                    cursor: "pointer",
                    border: currentIndex === idx ? "2px solid #f60" : "1px solid #ddd",
                  }}
                  onClick={() => setCurrentIndex(idx)}
                />
              ))}
          </div>
        </div>

        {/* Th√¥ng tin s·∫£n ph·∫©m */}
        <div className="col-md-7">
          <h2>{product.name}</h2>
          <h4 className="text-danger">{Number(product.price).toLocaleString("vi-VN")}‚Ç´</h4>

          <table className="table mt-3">
            <tbody>
              {visibleSpecs.map((spec, idx) => (
                <tr key={idx}>
                  <th>{spec.label}</th>
                  <td>{spec.value}</td>
                </tr>
              ))}
            </tbody>
          </table>

          {/* N√∫t xem th√™m / thu g·ªçn */}
          {specs.length > 10 && (
            <button
              className="btn btn-light d-flex align-items-center gap-2"
              onClick={() => setShowAllSpecs(!showAllSpecs)}
            >
              {showAllSpecs ? (
                <>
                  Thu g·ªçn <FaChevronUp />
                </>
              ) : (
                <>
                  Xem th√™m <FaChevronDown />
                </>
              )}
            </button>
          )}

          <button
            onClick={handleAddToCart}
            className="btn btn-warning mt-3"
            disabled={adding}
          >
            {adding ? "ƒêang th√™m..." : "Th√™m v√†o gi·ªè"}
          </button>
        </div>
      </div>
    </div>
  );
}

export default ProductDetail;
